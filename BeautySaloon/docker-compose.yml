version: '1.0'

volumes:
    beautysaloonsqldata:
    identitysqldata:
    healthcheckssqldata:
    rabbitmqdata:
    miniodata:

networks:
    beautysaloon-network:
        external: true

services:
    minio:
       image: minio/minio:latest
       command: server --console-address ":9001" /data/
       ports:
         - "9000:9000"
         - "9001:9001"
       environment:
         MINIO_ROOT_USER: ozontech
         MINIO_ROOT_PASSWORD: minio123
       volumes:
         - miniodata:/data
       healthcheck:
         test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
         interval: 30s
         timeout: 20s
         retries: 3
       networks:
          - beautysaloon-network

    rabbitmq:
        container_name: RabbitMQ
        image: rabbitmq:management-alpine
        hostname: beautysaloon-rabbit
        volumes:
            - rabbitmqdata:/var/lib/rabbitmq
        ports:
            - 5672:5672
            - 15672:15672
        networks:
            - beautysaloon-network

    beautysaloondata:
        container_name: BeautysaloonSQLServer
        image: mcr.microsoft.com/mssql/server:2019-latest
        ports:
            - "1433:1433"
        environment:
            - ACCEPT_EULA=Y
            - SA_PASSWORD=BeautysaloonSQLServer123
        volumes:
            - beautysaloonsqldata:/var/opt/mssql
        networks:
            - beautysaloon-network

    identitydata:
        container_name: BeautysaloonIdentitySQLServer
        image: mcr.microsoft.com/mssql/server:2019-latest
        ports:
            - "1133:1433"
        environment:
            - ACCEPT_EULA=Y
            - SA_PASSWORD=BeautysaloonIdentitySQLServer123
        volumes:
            - identitysqldata:/var/opt/mssql
        networks:
            - beautysaloon-network

    healthchecksdata:
        container_name: BeautysaloonHealthChecksSQLServer
        image: mcr.microsoft.com/mssql/server:2019-latest
        ports:
            - "1533:1433"
        environment:
            - ACCEPT_EULA=Y
            - SA_PASSWORD=BeautysaloonHealthChecksSQLServer123
        volumes:
            - healthcheckssqldata:/var/opt/mssql
        networks:
            - beautysaloon-network

    images:
        container_name: beautysaloon-images
        image: beautysaloon-image-service:2.3
        build:
            dockerfile: ./BeautySaloon.ImagesAPI/Dockerfile
        ports:
            - "5040:80"
        environment:
            - ConnectionStrings__BeautysaloonDbConnection=Server=BeautysaloonSQLServer;Initial Catalog=BeautySaloonDb; MultipleActiveResultSets=True; TrustServerCertificate=true; User Id = sa; Password = BeautysaloonSQLServer123;
        restart: on-failure
        networks:
            - beautysaloon-network
    identity:
        container_name: beautysaloon-identity
        image: beautysaloon-identity-service:5.5
        build:
            dockerfile: ./BeautySaloon.Identity/Dockerfile
        ports:
            - "5001:443"
            - "5010:80"
        environment:
            - ASPNETCORE_URLS=https://+:443;http://+:80;
            - ASPNETCORE_Kestrel__Certificates__Default__Password=DoctorHouse2001
            - ASPNETCORE_Kestrel__Certificates__Default__Path=/app/certs/aspnetapp.pfx
            - ConnectionStrings__BeautysaloonIdentityDbConnection=Server=BeautysaloonIdentitySQLServer;Initial Catalog=BeautySaloonDb; MultipleActiveResultSets=True; TrustServerCertificate=true; User Id = sa; Password = BeautysaloonIdentitySQLServer123;
        restart: on-failure
        networks:
            - beautysaloon-network
        depends_on:
            - identitydata
            - rabbitmq
        volumes:
            - ./certs:/app/certs:ro

    beautysaloon:
        container_name: beautysaloon
        image: beautysaloon-service:5.3
        build:
            dockerfile: ./BeautySaloon.API/Dockerfile
        ports:
            - "5020:80"
        environment:
            - ConnectionStrings__BeautysaloonDbConnection=Server=BeautysaloonSQLServer;Initial Catalog=BeautySaloonDb; MultipleActiveResultSets=True; TrustServerCertificate=true; User Id = sa; Password = BeautysaloonSQLServer123;
        restart: on-failure
        networks:
            - beautysaloon-network
        depends_on:
            - rabbitmq
            - beautysaloondata
        volumes:
            - ./certs:/app/certs:ro

    healthchecks:
        container_name: healthchecks
        image: beautysaloon-healthcheck-service:5.1
        build:
            dockerfile: ./BeautySaloon.HealthChecksUI/Dockerfile
        ports:
            - "5030:80"
        environment:
            - ConnectionStrings__HealthChecksDb=Server=BeautysaloonHealthChecksSQLServer;Initial Catalog=BeautySaloonDb; MultipleActiveResultSets=True; TrustServerCertificate=true; User Id = sa; Password = BeautysaloonHealthChecksSQLServer123;
        restart: on-failure
        networks:
            - beautysaloon-network
        depends_on:
            - healthchecksdata
            - rabbitmq
            - identity
            - beautysaloon
        volumes:
            - ./certs:/app/certs:ro